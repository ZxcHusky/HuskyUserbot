import random
import time
import sys
import os
import asyncio
import base64
import subprocess
import glob
import signal
import requests
import importlib.util
from pyrogram import Client, filters
from pyrogram.types import Message, User
from pyrogram.enums import ChatType

WEBSITE_URL = "https://huskyuserbot.vercel.app"

@Client.on_message(filters.command("ping", prefixes=".") & filters.me)
async def ping_command(client: Client, message: Message):
    try:
        start = time.time()
        await message.edit("üèì –ü–æ–Ω–≥!")
        end = time.time()
        await message.edit(f"üèì –ü–æ–Ω–≥!\n‚ö° –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–∫–ª–∏–∫–∞: {round((end - start) * 1000)}–º—Å")
    except Exception as e:
        await message.edit("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

@Client.on_message(filters.command("test", prefixes=".") & filters.me)
async def test_command(client: Client, message: Message):
    await message.edit("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

@Client.on_message(filters.command("restart", prefixes=".") & filters.me)
async def restart_command(client: Client, message: Message):
    try:
        with open('restart_msg.txt', 'w') as f:
            f.write(f"{message.chat.id},{message.id}")
        
        await message.edit("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        script_dir = os.path.dirname(os.path.abspath(__file__))
        restart_path = os.path.join(os.path.dirname(script_dir), "restart.py")
        
        subprocess.Popen(
            ['start', 'cmd', '/k', 'python', restart_path],
            shell=True,
            cwd=os.path.dirname(script_dir)
        )
        
        await asyncio.sleep(2)
        
        sys.exit(0)
        
    except Exception as e:
        await message.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {str(e)}")

@Client.on_message(filters.command("installmodule", prefixes=".") & filters.me)
async def install_module_command(client: Client, message: Message):
    try:
        if len(message.command) < 2:
            await message.edit("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .installmodule [–Ω–∞–∑–≤–∞–Ω–∏–µ_–º–æ–¥—É–ª—è]\n\n–ü—Ä–∏–º–µ—Ä: .installmodule gpt_module")
            return
        
        module_name = message.command[1]
        await message.edit(f"üîÑ –ü–æ–∏—Å–∫ –º–æ–¥—É–ª—è '{module_name}'...")
        
        module_path = f"modules/{module_name}.py"
        if os.path.exists(module_path):
            await message.edit(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å '{module_name}' —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .updatemodule {module_name} –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return
        
        try:
            response = requests.get(f"{WEBSITE_URL}/api/modules/{module_name}", timeout=10)
            
            if response.status_code == 404:
                await message.edit(f"‚ùå –ú–æ–¥—É–ª—å '{module_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ —Å–∞–π—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π")
                return
            elif response.status_code != 200:
                await message.edit(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
                return
            
            module_data = response.json()
            
        except requests.exceptions.RequestException as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É:\n{str(e)}")
            return
        except Exception as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return
        
        await message.edit(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è '{module_name}'...")
        
        os.makedirs("modules", exist_ok=True)
        
        try:
            with open(module_path, 'w', encoding='utf-8') as f:
                f.write(module_data['source_code'])
            
            await message.edit(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è '{module_name}'...")
            
            try:
                spec = importlib.util.spec_from_file_location(module_name, module_path)
                module = importlib.util.module_from_spec(spec)
                spec.loader.exec_module(module)
                
                if hasattr(module, 'setup'):
                    await module.setup(client)
                
                success_text = f"""‚úÖ **–ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!**

üì¶ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {module_data['name']}
üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {module_data['description']}
üë§ **–ê–≤—Ç–æ—Ä:** {module_data.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üî¢ **–í–µ—Ä—Å–∏—è:** {module_data['version']}

üîÑ –ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `.help` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
                
                await message.edit(success_text)
                
            except Exception as e:
                if os.path.exists(module_path):
                    os.remove(module_path)
                await message.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è:\n{str(e)}\n\n–ú–æ–¥—É–ª—å —É–¥–∞–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.")
                
        except Exception as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–æ–¥—É–ª—è: {str(e)}")
            
    except Exception as e:
        await message.edit(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

@Client.on_message(filters.command("updatemodule", prefixes=".") & filters.me)
async def update_module_command(client: Client, message: Message):
    try:
        if len(message.command) < 2:
            await message.edit("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .updatemodule [–Ω–∞–∑–≤–∞–Ω–∏–µ_–º–æ–¥—É–ª—è]")
            return
        
        module_name = message.command[1]
        module_path = f"modules/{module_name}.py"
        
        if not os.path.exists(module_path):
            await message.edit(f"‚ùå –ú–æ–¥—É–ª—å '{module_name}' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .installmodule {module_name} –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
            return
        
        await message.edit(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è '{module_name}'...")
        
        try:
            response = requests.get(f"{WEBSITE_URL}/api/modules/{module_name}", timeout=10)
            
            if response.status_code == 404:
                await message.edit(f"‚ùå –ú–æ–¥—É–ª—å '{module_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
                return
            elif response.status_code != 200:
                await message.edit(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
                return
            
            module_data = response.json()
            
        except requests.exceptions.RequestException as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É:\n{str(e)}")
            return
        
        backup_path = f"modules/{module_name}.py.backup"
        try:
            if os.path.exists(module_path):
                with open(module_path, 'r', encoding='utf-8') as f:
                    old_content = f.read()
                with open(backup_path, 'w', encoding='utf-8') as f:
                    f.write(old_content)
        except Exception:
            pass
        
        try:
            with open(module_path, 'w', encoding='utf-8') as f:
                f.write(module_data['source_code'])
            
            success_text = f"""‚úÖ **–ú–æ–¥—É–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!**

üì¶ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {module_data['name']}
üî¢ **–í–µ—Ä—Å–∏—è:** {module_data['version']}

‚ö†Ô∏è **–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞** –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:
`.restart`"""
            
            await message.edit(success_text)
            
        except Exception as e:
            if os.path.exists(backup_path):
                try:
                    with open(backup_path, 'r', encoding='utf-8') as f:
                        old_content = f.read()
                    with open(module_path, 'w', encoding='utf-8') as f:
                        f.write(old_content)
                    os.remove(backup_path)
                except Exception:
                    pass
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª—è: {str(e)}")
            
    except Exception as e:
        await message.edit(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

@Client.on_message(filters.command("removemodule", prefixes=".") & filters.me)
async def remove_module_command(client: Client, message: Message):
    try:
        if len(message.command) < 2:
            await message.edit("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .removemodule [–Ω–∞–∑–≤–∞–Ω–∏–µ_–º–æ–¥—É–ª—è]")
            return
        
        module_name = message.command[1]
        
        if module_name in ['mainmodules', '__init__']:
            await message.edit("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–¥—É–ª—å!")
            return
        
        module_path = f"modules/{module_name}.py"
        
        if not os.path.exists(module_path):
            await message.edit(f"‚ùå –ú–æ–¥—É–ª—å '{module_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        try:
            os.remove(module_path)
            await message.edit(f"‚úÖ –ú–æ–¥—É–ª—å '{module_name}' —É–¥–∞–ª–µ–Ω\n\n‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        except Exception as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")
            
    except Exception as e:
        await message.edit(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

@Client.on_message(filters.command("listmodules", prefixes=".") & filters.me)
async def list_available_modules_command(client: Client, message: Message):
    try:
        await message.edit("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π...")
        
        try:
            response = requests.get(f"{WEBSITE_URL}/api/modules", timeout=10)
            
            if response.status_code != 200:
                await message.edit(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
                return
            
            modules_data = response.json()
            
            if not modules_data:
                await message.edit("‚ùå –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π")
                return
            
            modules_text = "üìö **–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:**\n\n"
            
            for module in modules_data[:10]:
                status = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if os.path.exists(f"modules/{module['name']}.py") else "üì• –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                modules_text += f"üì¶ **{module['name']}** v{module['version']}\n"
                modules_text += f"‚îî‚îÄ {module['description']}\n"
                modules_text += f"‚îî‚îÄ {status}\n\n"
            
            if len(modules_data) > 10:
                modules_text += f"... –∏ –µ—â–µ {len(modules_data) - 10} –º–æ–¥—É–ª–µ–π\n\n"
            
            modules_text += "**–ö–æ–º–∞–Ω–¥—ã:**\n"
            modules_text += "`.installmodule [–Ω–∞–∑–≤–∞–Ω–∏–µ]` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
            modules_text += "`.updatemodule [–Ω–∞–∑–≤–∞–Ω–∏–µ]` - –æ–±–Ω–æ–≤–∏—Ç—å\n"
            modules_text += "`.removemodule [–Ω–∞–∑–≤–∞–Ω–∏–µ]` - —É–¥–∞–ª–∏—Ç—å"
            
            await message.edit(modules_text)
            
        except requests.exceptions.RequestException as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É:\n{str(e)}")
        except Exception as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            
    except Exception as e:
        await message.edit(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

@Client.on_message(filters.command("calc", prefixes=".") & filters.me)
async def calc_command(client: Client, message: Message):
    if len(message.command) < 2:
        await message.edit("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .calc [–≤—ã—Ä–∞–∂–µ–Ω–∏–µ]")
        return
    
    try:
        expression = " ".join(message.command[1:])
        result = eval(expression, {"__builtins__": {}}, {"abs": abs, "round": round})
        await message.edit(f"üî¢ {expression} = **{result}**")
    except Exception as e:
        await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@Client.on_message(filters.command("pin", prefixes=".") & filters.me)
async def pin_message(client: Client, message: Message):
    if message.reply_to_message:
        try:
            await client.pin_chat_message(
                message.chat.id,
                message.reply_to_message.id
            )
            await message.edit("üìå –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ!")
        except Exception as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.edit("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä–µ–ø–∏—Ç—å")

@Client.on_message(filters.command(["id", "chatid"], prefixes=".") & filters.me)
async def get_id(client: Client, message: Message):
    if message.command[0] == "chatid":
        await message.edit(f"ID —á–∞—Ç–∞: `{message.chat.id}`")
    else:
        if message.reply_to_message:
            user_id = message.reply_to_message.from_user.id
            await message.edit(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `{user_id}`")
        else:
            await message.edit(f"ID —á–∞—Ç–∞: `{message.chat.id}`\n–í–∞—à ID: `{message.from_user.id}`")

@Client.on_message(filters.command("info", prefixes=".") & filters.me)
async def user_info(client: Client, message: Message):
    if not message.reply_to_message:
        await message.edit("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    user: User = message.reply_to_message.from_user
    info_text = f"""
üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:**
**ID:** `{user.id}`
**–ò–º—è:** {user.first_name}
**–§–∞–º–∏–ª–∏—è:** {user.last_name or "–ù–µ—Ç"}
**Username:** @{user.username or "–ù–µ—Ç"}
**–ë–æ—Ç:** {"–î–∞" if user.is_bot else "–ù–µ—Ç"}
"""
    await message.edit(info_text)

@Client.on_message(filters.command("user", prefixes=".") & filters.me)
async def find_user(client: Client, message: Message):
    if len(message.command) < 2:
        await message.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    username = message.command[1].replace("@", "")
    try:
        user = await client.get_users(username)
        info_text = f"""
üë§ **–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:**
**ID:** `{user.id}`
**–ò–º—è:** {user.first_name}
**–§–∞–º–∏–ª–∏—è:** {user.last_name or "–ù–µ—Ç"}
**Username:** @{user.username or "–ù–µ—Ç"}
"""
        await message.edit(info_text)
    except Exception:
        await message.edit("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

@Client.on_message(filters.command("setname", prefixes=".") & filters.me)
async def set_name(client: Client, message: Message):
    args = message.text.split(maxsplit=2)[1:]
    if not args:
        await message.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è")
        return
    
    try:
        if len(args) == 2:
            await client.update_profile(first_name=args[0], last_name=args[1])
            await message.edit(f"‚úÖ –ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {args[0]} {args[1]}")
        else:
            await client.update_profile(first_name=args[0])
            await message.edit(f"‚úÖ –ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {args[0]}")
    except Exception as e:
        await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@Client.on_message(filters.command("setbio", prefixes=".") & filters.me)
async def set_bio(client: Client, message: Message):
    if len(message.command) < 2:
        await message.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –±–∏–æ")
        return
    
    new_bio = message.text.split(maxsplit=1)[1]
    try:
        await client.update_profile(bio=new_bio)
        await message.edit("‚úÖ –ë–∏–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@Client.on_message(filters.command(["coin", "flip"], prefixes=".") & filters.me)
async def coin_command(client: Client, message: Message):
    try:
        result = random.choice(["üëë –û—Ä—ë–ª", "ü™ô –†–µ—à–∫–∞"])
        await message.edit("üé≤ –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞—é –º–æ–Ω–µ—Ç–∫—É...")
        await asyncio.sleep(1)
        await message.edit(result)
    except Exception as e:
        await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@Client.on_message(filters.command("parse", prefixes=".") & filters.me)
async def parse_members(client: Client, message: Message):
    if not message.chat.id:
        await message.edit("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö/–∫–∞–Ω–∞–ª–∞—Ö")
        return

    await message.edit("üîÑ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
    try:
        members = []
        async for member in client.get_chat_members(message.chat.id):
            if not member.user.is_bot:
                user = member.user
                members.append(f"‚Ä¢ {user.first_name} {user.last_name or ''} (@{user.username or '–ù–µ—Ç'}) - `{user.id}`")
                
                if len(members) >= 50:
                    break
        
        result = "üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞:**\n\n" + "\n".join(members)
        await message.edit(result)
    except Exception as e:
        await message.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}")

@Client.on_message(filters.command("call", prefixes=".") & filters.me)
async def call_all_members(client: Client, message: Message):
    try:
        if message.chat.type not in [ChatType.GROUP, ChatType.SUPERGROUP]:
            await message.edit("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
            return

        await message.edit("üîÑ –°–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
        
        custom_text = " ".join(message.command[1:]) if len(message.command) > 1 else "üë• –í—Å–µ–º –ø—Ä–∏–≤–µ—Ç!"
        
        members = []
        async for member in client.get_chat_members(message.chat.id):
            if not member.user.is_bot and not member.user.is_deleted:
                members.append(member.user)
        
        if not members:
            await message.edit("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ–≥–∞")
            return
        
        chunk_size = 5
        for i in range(0, len(members), chunk_size):
            chunk = members[i:i + chunk_size]
            mentions = []
            
            for user in chunk:
                name = user.first_name
                if user.last_name:
                    name += f" {user.last_name}"
                mentions.append(f"[{name}](tg://user?id={user.id})")
            
            mention_text = f"{custom_text}\n{' '.join(mentions)}"
            try:
                await client.send_message(message.chat.id, mention_text)
                await asyncio.sleep(2)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–≥–æ–≤: {e}")
                continue
        
        await message.edit("‚úÖ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±—ã–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã!")
    except Exception as e:
        await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@Client.on_message(filters.command("encode", prefixes=".") & filters.me)
async def encode_base64(client: Client, message: Message):
    try:
        if len(message.command) < 2:
            await message.edit("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .encode [—Ç–µ–∫—Å—Ç]")
            return
        
        text = " ".join(message.command[1:])
        encoded = base64.b64encode(text.encode()).decode()
        await message.edit(f"üîí **Encoded:**\n`{encoded}`")
    except Exception as e:
        await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@Client.on_message(filters.command("decode", prefixes=".") & filters.me)
async def decode_base64(client: Client, message: Message):
    try:
        if len(message.command) < 2:
            await message.edit("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .decode [base64]")
            return
        
        text = " ".join(message.command[1:])
        decoded = base64.b64decode(text.encode()).decode()
        await message.edit(f"üîì **Decoded:**\n`{decoded}`")
    except Exception as e:
        await message.edit(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç base64")

@Client.on_message(filters.command("help", prefixes=".") & filters.me)
async def help_command(client: Client, message: Message):
    try:
        help_text = """
üìö **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

**–û—Å–Ω–æ–≤–Ω—ã–µ:**
`.ping` - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
`.test` - –¢–µ—Å—Ç –±–æ—Ç–∞
`.help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
`.restart` - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —é–∑–µ—Ä–±–æ—Ç–∞
`.modules` - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
`.id` - –ü–æ–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—á–∞—Ç–∞
`.info` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (—Ä–µ–ø–ª–∞–µ–º)
`.chatid` - ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
`.user` - –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫—É
`.pin` - –ó–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ä–µ–ø–ª–∞–µ–º)
`.calc` - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, .calc 2+2*3)
`.parse` - –ü–∞—Ä—Å–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
`.call` - –¢–µ–≥–Ω—É—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏:**
`.installmodule [–Ω–∞–∑–≤–∞–Ω–∏–µ]` - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å —Å —Å–∞–π—Ç–∞
`.updatemodule [–Ω–∞–∑–≤–∞–Ω–∏–µ]` - –û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å
`.removemodule [–Ω–∞–∑–≤–∞–Ω–∏–µ]` - –£–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å
`.listmodules` - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π

**–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ:**
`.encode [—Ç–µ–∫—Å—Ç]` - –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ base64
`.decode [base64]` - –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ base64

**–ü—Ä–æ—Ñ–∏–ª—å:**
`.setname` - –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è/—Ñ–∞–º–∏–ª–∏—é
`.setbio` - –ò–∑–º–µ–Ω–∏—Ç—å –±–∏–æ

**–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:**
`.coin` –∏–ª–∏ `.flip` - –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É

**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:**
–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
"""
        await message.edit(help_text)
    except Exception as e:
        await message.edit("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

@Client.on_message(filters.command("modules", prefixes=".") & filters.me)
async def list_modules(client: Client, message: Message):
    try:
        module_files = glob.glob("modules/*.py")
        
        if not module_files:
            await message.edit("‚ùå –ú–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        modules_text = "üìö **–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:**\n\n"
        
        for module_path in module_files:
            module_name = os.path.basename(module_path)[:-3]
            
            if module_name.startswith('_'):
                continue
                
            if module_name == "mainmodules":
                description = "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"
            elif module_name == "gpt_module":
                description = "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ChatGPT"
            elif module_name == "search_module":
                description = "–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
            elif module_name == "saver_module":
                description = "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"
            elif module_name == "games":
                description = "–ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã"
            elif module_name == "osint_module":
                description = "OSINT –∏ –ø–æ–∏—Å–∫ —É—Ç–µ—á–µ–∫"
            else:
                description = "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å"
            
            modules_text += f"üìå **{module_name}**\n"
            modules_text += f"‚îî‚îÄ {description}\n\n"
        
        total_modules = len([m for m in module_files if not os.path.basename(m)[:-3].startswith('_')])
        modules_text += f"**–í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π:** {total_modules}\n\n"
        modules_text += "**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏:**\n"
        modules_text += "`.listmodules` - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞ —Å–∞–π—Ç–µ\n"
        modules_text += "`.installmodule [–Ω–∞–∑–≤–∞–Ω–∏–µ]` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π"
        
        await message.edit(modules_text)
        
    except Exception as e:
        await message.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π: {str(e)}")
