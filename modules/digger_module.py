from pyrogram import Client, filters
import asyncio
import re
from collections import defaultdict

MINE_BOT_ID = 7084173311

active_tasks = {}

stats = {
    'digs': 0,
    'items': defaultdict(int),
    'plasma': 0,
    'ore_found': 0
}

ITEMS_MAP = {
    "‚úâÔ∏è": "–ö–æ–Ω–≤–µ—Ä—Ç",
    "üßß": "–†–µ–¥–∫–∏–π –ö–æ–Ω–≤–µ—Ä—Ç",
    "üì¶": "–ö–µ–π—Å",
    "üó≥": "–†–µ–¥–∫–∏–π –ö–µ–π—Å",
    "üïã": "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ö–µ–π—Å",
    "üéÜ": "–ü–ª–∞–∑–º–∞",
    "üíº": "–ü–æ—Ä—Ç—Ñ–µ–ª—å",
    "üëú": "–°—É–º–∫–∞",
}

DEFAULT_DELAY = 1.3

async def dig_loop(client: Client, delay: float = DEFAULT_DELAY):
    try:
        while True:
            await client.send_message(MINE_BOT_ID, "–ö–æ–ø–∞—Ç—å")
            stats['digs'] += 1
            await asyncio.sleep(delay)
    except asyncio.CancelledError:
        pass

@Client.on_message(filters.regex(r"^\.dig(\s+\d*\.?\d*)?$") & filters.me)
async def handle_dig(client: Client, message):
    user_id = message.from_user.id
    
    if user_id in active_tasks and not active_tasks[user_id].done():
        active_tasks[user_id].cancel()
        
        total_digs = stats['digs']
        
        stats_text = [
            "üõë –ö–æ–ø–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
            f"‚õè –í—Å–∫–æ–ø–∞–Ω–æ: {total_digs} —Ä–∞–∑",
            "\nüìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:"
        ]
        
        items_found = False
        for emoji, item_name in ITEMS_MAP.items():
            count = stats['items'][emoji]
            if count > 0:
                items_found = True
                stats_text.append(f"{emoji} | {item_name}: {count} —à—Ç.")
        
        if not items_found:
            stats_text.append("‚ùå –ü—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        stats['digs'] = 0
        stats['items'].clear()
        stats['plasma'] = 0
        stats['ore_found'] = 0
        
        await message.edit_text("\n".join(stats_text))
        return

    delay = DEFAULT_DELAY
    match = re.match(r"^\.dig(?:\s+(\d*\.?\d*))?$", message.text)
    if match and match.group(1):
        try:
            delay = float(match.group(1))
            if delay < 1.0:
                delay = 1.0
        except ValueError:
            await message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–µ—Ä–∂–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: .dig 2)")
            return

    await message.edit_text(f"‚õè –ó–∞–ø—É—Å–∫–∞—é –∫–æ–ø–∞–Ω–∏–µ (–∑–∞–¥–µ—Ä–∂–∫–∞: {delay:.1f}—Å)...")
    
    task = asyncio.create_task(dig_loop(client, delay))
    active_tasks[user_id] = task
    
    await message.edit_text(
        f"‚úÖ –ö–æ–ø–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ (–∑–∞–¥–µ—Ä–∂–∫–∞: {delay:.1f}—Å)\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .dig –µ—â–µ —Ä–∞–∑ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
    )

@Client.on_message(
    filters.chat(MINE_BOT_ID) & 
    filters.user(MINE_BOT_ID)
)
async def handle_mine_messages(_, message):
    text = message.text or ""
    
    for emoji in ITEMS_MAP:
        if emoji in text:
            stats['items'][emoji] += 1
            break

async def setup(app: Client):
    pass 