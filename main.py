import os
import sys
import logging
import asyncio
import importlib
import glob
import subprocess
import signal
from typing import Dict
from pyrogram import Client
from rich.console import Console
from rich.prompt import Prompt
from rich.panel import Panel
from rich.progress import Progress
from colorama import init
from dotenv import load_dotenv

init()
load_dotenv()
console = Console()

API_ID = ""
API_HASH = ""
NAME = "userbot"

loaded_modules = {}
restart_flag = False

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler('bot.log'), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

def handle_restart():
    global restart_flag
    restart_flag = True

signal.signal(signal.SIGTERM, lambda signum, frame: handle_restart())

def show_banner():
    console.print(Panel("""
[bold cyan]‚ïî‚ïê‚ïê‚ïó‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïî‚ïó‚îÄ‚îÄ‚ïî‚ïê‚ïó
‚ïë‚ïî‚ïó‚ïë‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïë‚ïë‚îÄ‚îÄ‚ïë‚ïî‚ïù
‚ïë‚ïö‚ïù‚ïö‚ï¶‚ïó‚ïî‚ï¶‚ïê‚ïù‚ïë‚ïî‚ïê‚ïù‚ïö‚ï¶‚ïê‚ïê‚ï¶‚ïê‚ïó‚ïî‚ïê‚ïê‚ïó
‚ïë‚ïî‚ïê‚ïó‚ïë‚ïë‚ïë‚ïë‚ïî‚ïó‚ïë‚ïë‚ïî‚ïê‚ïó‚ïë‚ïë‚ïê‚ï£‚ïî‚ïù‚ïë‚ïê‚ïê‚ï£
‚ïë‚ïö‚ïê‚ïù‚ïë‚ïö‚ïù‚ïë‚ïö‚ïù‚ïë‚ïë‚ïö‚ïê‚ïù‚ïë‚ïë‚ïê‚ï£‚ïë‚îÄ‚ï†‚ïê‚ïê‚ïë
‚ïö‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ï©‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ï©‚ïù‚îÄ‚ïö‚ïê‚ïê‚ïù[/bold cyan]

[blink yellow]‚ñÑÔ∏ª„ÉáTÕéEÕéLÕéEÕéGÕéRÕéAÕéMÕé UÕéSÕéEÕéRÕéBÕéOÕéT‚ïê‚ïê‚îÅ‰∏Ä[/blink yellow]
[green]–í–µ—Ä—Å–∏—è: 2.1 Beta| Husky-inspired[/green]""", 
title="üöÄ [bold white]–ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´[/bold white]", border_style="bright_cyan"))

async def authorize_user() -> Client:
    console.print(Panel("[bold bright_white]‚ö° –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò[/bold bright_white]", border_style="yellow"))
    
    if not API_ID or not API_HASH:
        console.print(Panel("[red]‚õî –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API-–∫–ª—é—á–∏![/red]", border_style="red"))
        sys.exit(1)

    app = Client(NAME, api_id=API_ID, api_hash=API_HASH, plugins=dict(root="modules"))
    
    try:
        session_file = f"{NAME}.session"
        if os.path.exists(session_file):
            console.print("[green]‚úì –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏[/green]")
            return app

        console.print("[yellow]–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...[/yellow]")
        await app.connect()

        try:
            await app.get_me()
        except Exception:
            phone = Prompt.ask("[bold yellow]üì± –í–í–ï–î–ò–¢–ï –ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê[/bold yellow]")
            sent_code = await app.send_code(phone)
            
            code = Prompt.ask("[bold yellow]üîë –í–í–ï–î–ò–¢–ï –ö–û–î –ò–ó TELEGRAM[/bold yellow]")
            
            try:
                await app.sign_in(phone, sent_code.phone_code_hash, code)
            except SessionPasswordNeeded:
                password = Prompt.ask("[bold red]üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA[/bold red]", password=True)
                await app.check_password(password)
        
        await app.disconnect()
        console.print(Panel("[green]‚úÖ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê![/green]", border_style="green"))
        return app
    except Exception as e:
        console.print(Panel(f"[red]‚õî –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}[/red]", border_style="red"))
        try:
            await app.disconnect()
        except:
            pass
        sys.exit(1)

async def load_modules(app: Client):
    modules_dir = os.path.join(os.path.dirname(__file__), "modules")
    if not os.path.exists(modules_dir):
        os.makedirs(modules_dir)
        console.print("[yellow]üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è modules[/yellow]")
        return

    module_files = glob.glob(os.path.join(modules_dir, "*.py"))
    
    for module_path in module_files:
        try:
            module_name = os.path.basename(module_path)[:-3]
            spec = importlib.util.spec_from_file_location(module_name, module_path)
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            
            if hasattr(module, 'setup'):
                await module.setup(app)
            
            loaded_modules[module_name] = module
            console.print(f"[green]‚úì –ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å:[/green] {module_name}")
        except Exception as e:
            console.print(f"[red]‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è {module_name}:[/red] {str(e)}")

async def main():
    show_banner()
    
    with Progress() as progress:
        task = progress.add_task("[cyan]üîÑ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´...", total=100)
        for _ in range(100):
            progress.update(task, advance=1)
            await asyncio.sleep(0.02)
    
    app = await authorize_user()
    
    try:
        await app.start()
        await load_modules(app)
        
        console.print(Panel("[bold green]‚úÖ –°–ò–°–¢–ï–ú–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê[/bold green]", 
                          subtitle="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ [yellow].help[/yellow] –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥", 
                          border_style="green"))
        
        print("\n[green]–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ CTRL+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.[/green]")
        
        while not restart_flag:
            await asyncio.sleep(1)
        
        if restart_flag:
            console.print("[yellow]‚ö° –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏...[/yellow]")
            subprocess.Popen([sys.executable, "restart.py"],
                           stdout=subprocess.PIPE,
                           stderr=subprocess.PIPE,
                           start_new_session=True)
            await app.stop()
            sys.exit(0)
            
    except KeyboardInterrupt:
        console.print(Panel("[yellow]‚ö° –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...[/yellow]", border_style="yellow"))
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        try:
            if app.is_connected:
                await app.stop()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {str(e)}")

def idle():
    loop = asyncio.get_event_loop()
    return loop.create_future()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        console.print(Panel("[red]‚õî –°–ò–°–¢–ï–ú–ê –û–°–¢–ê–ù–û–í–õ–ï–ù–ê[/red]", border_style="red"))
